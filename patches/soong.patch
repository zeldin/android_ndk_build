diff --git a/Android.bp b/Android.bp
index 831b703..a165ed5 100644
--- a/Android.bp
+++ b/Android.bp
@@ -139,6 +139,8 @@ bootstrap_go_package {
         "cc/x86_darwin_host.go",
         "cc/x86_linux_host.go",
         "cc/x86_windows_host.go",
+        "cc/arm_linux_host.go",
+        "cc/ppc_linux_host.go",
     ],
     testSrcs: [
         "cc/cc_test.go",
diff --git a/bootstrap.bash b/bootstrap.bash
index 62c429c..1b98de9 100755
--- a/bootstrap.bash
+++ b/bootstrap.bash
@@ -33,9 +33,9 @@ case $(uname) in
 	;;
     *) echo "unknown OS:" $(uname) && exit 1;;
 esac
-export GOROOT="${SRCDIR}/prebuilts/go/$PREBUILTOS/"
-export GOARCH="amd64"
-export GOCHAR="6"
+# export GOROOT="${SRCDIR}/prebuilts/go/$PREBUILTOS/"
+# export GOARCH="amd64"
+# export GOCHAR="6"
 
 if [[ $# -eq 0 ]]; then
     mkdir -p $BUILDDIR
diff --git a/cc/arm_linux_host.go b/cc/arm_linux_host.go
new file mode 100644
index 0000000..bb0c569
--- /dev/null
+++ b/cc/arm_linux_host.go
@@ -0,0 +1,111 @@
+// Copyright 2016 Google Inc. All rights reserved.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package cc
+
+import (
+	"strings"
+
+	"android/soong/common"
+)
+
+var (
+	// Extended cflags
+	linuxAarch64Cflags = []string{
+		"-m64",
+	}
+
+	linuxAarch64Ldflags = []string{
+		"-m64",
+	}
+
+	linuxAarch64ClangLdflags = append(clangFilterUnknownCflags(linuxAarch64Ldflags), []string{
+		"-B${LinuxAarch64GccRoot}/lib/gcc/${LinuxAarch64GccTriple}/${linuxGccVersion}",
+		"-L${LinuxAarch64GccRoot}/lib/gcc/${LinuxAarch64GccTriple}/${linuxGccVersion}",
+		"-L${LinuxAarch64GccRoot}/${LinuxAarch64GccTriple}/lib64",
+	}...)
+
+	linuxAarch64ClangCppflags = []string{
+		"-isystem ${LinuxAarch64GccRoot}/${LinuxAarch64GccTriple}/include/c++/${linuxGccVersion}/${LinuxAarch64GccTriple}",
+	}
+
+)
+
+func init() {
+
+	// Extended cflags
+	pctx.StaticVariable("LinuxAarch64Cflags", strings.Join(linuxAarch64Cflags, " "))
+	pctx.StaticVariable("LinuxAarch64Ldflags", strings.Join(linuxAarch64Ldflags, " "))
+
+	pctx.StaticVariable("LinuxAarch64ClangCflags",
+		strings.Join(clangFilterUnknownCflags(linuxAarch64Cflags), " "))
+	pctx.StaticVariable("LinuxAarch64ClangLdflags", strings.Join(linuxAarch64ClangLdflags, " "))
+	pctx.StaticVariable("LinuxAarch64ClangCppflags", strings.Join(linuxAarch64ClangCppflags, " "))
+}
+
+type toolchainLinuxAarch64 struct {
+	toolchain64Bit
+	toolchainLinux
+}
+
+func (t *toolchainLinuxAarch64) Name() string {
+	return "arm64"
+}
+
+func (t *toolchainLinuxAarch64) Cflags() string {
+	return "${linuxCflags} ${LinuxAarch64Cflags}"
+}
+
+func (t *toolchainLinuxAarch64) Ldflags() string {
+	return "${linuxLdflags} ${LinuxAarch64Ldflags}"
+}
+
+func (t *toolchainLinuxAarch64) GccRoot() string {
+	return "${LinuxAarch64GccRoot}"
+}
+
+func (t *toolchainLinuxAarch64) GccTriple() string {
+	return "${LinuxAarch64GccTriple}"
+}
+
+func (t *toolchainLinuxAarch64) ClangTriple() string {
+	return "aarch64-linux-gnu"
+}
+
+func (t *toolchainLinuxAarch64) ClangCflags() string {
+	return "${linuxClangCflags} ${LinuxAarch64ClangCflags}"
+}
+
+func (t *toolchainLinuxAarch64) ClangCppflags() string {
+	return "${linuxClangCppflags} ${LinuxAarch64ClangCppflags}"
+}
+
+func (t *toolchainLinuxAarch64) ClangLdflags() string {
+	return "${linuxClangLdflags} ${LinuxAarch64ClangLdflags}"
+}
+
+var toolchainLinuxAarch64Singleton Toolchain = &toolchainLinuxAarch64{}
+
+func linuxAarch64ToolchainFactory(arch common.Arch) Toolchain {
+	return toolchainLinuxAarch64Singleton
+}
+
+func init() {
+	pctx.SourcePathVariable("LinuxAarch64GccRoot",
+		"prebuilts/gcc/${HostPrebuiltTag}/host/arm64-linux-glibc2.15-${linuxGccVersion}")
+
+	pctx.StaticVariable("LinuxAarch64GccTriple", "aarch64-unknown-linux-gnu")
+
+	registerHostToolchainFactory(common.Linux, common.Arm64, linuxAarch64ToolchainFactory)
+}
diff --git a/cc/ppc_linux_host.go b/cc/ppc_linux_host.go
new file mode 100644
index 0000000..a35e220
--- /dev/null
+++ b/cc/ppc_linux_host.go
@@ -0,0 +1,111 @@
+// Copyright 2016 Google Inc. All rights reserved.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package cc
+
+import (
+	"strings"
+
+	"android/soong/common"
+)
+
+var (
+	// Extended cflags
+	linuxPpcCflags = []string{
+		"-m32",
+	}
+
+	linuxPpcLdflags = []string{
+		"-m32",
+	}
+
+	linuxPpcClangLdflags = append(clangFilterUnknownCflags(linuxPpcLdflags), []string{
+		"-B${LinuxPpcGccRoot}/lib/gcc/${LinuxPpcGccTriple}/${linuxGccVersion}",
+		"-L${LinuxPpcGccRoot}/lib/gcc/${LinuxPpcGccTriple}/${linuxGccVersion}",
+		"-L${LinuxPpcGccRoot}/${LinuxPpcGccTriple}/lib32",
+	}...)
+
+	linuxPpcClangCppflags = []string{
+		"-isystem ${LinuxPpcGccRoot}/${LinuxPpcGccTriple}/include/c++/${linuxGccVersion}/${LinuxPpcGccTriple}",
+	}
+
+)
+
+func init() {
+
+	// Extended cflags
+	pctx.StaticVariable("LinuxPpcCflags", strings.Join(linuxPpcCflags, " "))
+	pctx.StaticVariable("LinuxPpcLdflags", strings.Join(linuxPpcLdflags, " "))
+
+	pctx.StaticVariable("LinuxPpcClangCflags",
+		strings.Join(clangFilterUnknownCflags(linuxPpcCflags), " "))
+	pctx.StaticVariable("LinuxPpcClangLdflags", strings.Join(linuxPpcClangLdflags, " "))
+	pctx.StaticVariable("LinuxPpcClangCppflags", strings.Join(linuxPpcClangCppflags, " "))
+}
+
+type toolchainLinuxPpc struct {
+	toolchain32Bit
+	toolchainLinux
+}
+
+func (t *toolchainLinuxPpc) Name() string {
+	return "ppc"
+}
+
+func (t *toolchainLinuxPpc) Cflags() string {
+	return "${linuxCflags} ${LinuxPpcCflags}"
+}
+
+func (t *toolchainLinuxPpc) Ldflags() string {
+	return "${linuxLdflags} ${LinuxPpcLdflags}"
+}
+
+func (t *toolchainLinuxPpc) GccRoot() string {
+	return "${LinuxPpcGccRoot}"
+}
+
+func (t *toolchainLinuxPpc) GccTriple() string {
+	return "${LinuxPpcGccTriple}"
+}
+
+func (t *toolchainLinuxPpc) ClangTriple() string {
+	return "powerpc-linux-gnu"
+}
+
+func (t *toolchainLinuxPpc) ClangCflags() string {
+	return "${linuxClangCflags} ${LinuxPpcClangCflags}"
+}
+
+func (t *toolchainLinuxPpc) ClangCppflags() string {
+	return "${linuxClangCppflags} ${LinuxPpcClangCppflags}"
+}
+
+func (t *toolchainLinuxPpc) ClangLdflags() string {
+	return "${linuxClangLdflags} ${LinuxPpcClangLdflags}"
+}
+
+var toolchainLinuxPpcSingleton Toolchain = &toolchainLinuxPpc{}
+
+func linuxPpcToolchainFactory(arch common.Arch) Toolchain {
+	return toolchainLinuxPpcSingleton
+}
+
+func init() {
+	pctx.SourcePathVariable("LinuxPpcGccRoot",
+		"prebuilts/gcc/${HostPrebuiltTag}/host/ppc-linux-glibc2.15-${linuxGccVersion}")
+
+	pctx.StaticVariable("LinuxPpcGccTriple", "powerpc-unknown-linux-gnu")
+
+	registerHostToolchainFactory(common.Linux, common.Ppc, linuxPpcToolchainFactory)
+}
diff --git a/common/arch.go b/common/arch.go
index 8a86c79..ba43387 100644
--- a/common/arch.go
+++ b/common/arch.go
@@ -40,6 +40,7 @@ var (
 	Mips64 = newArch("mips64", "lib64")
 	X86    = newArch("x86", "lib32")
 	X86_64 = newArch("x86_64", "lib64")
+	Ppc    = newArch("ppc", "lib32")
 
 	Common = ArchType{
 		Name: "common",
@@ -53,6 +54,7 @@ var archTypeMap = map[string]ArchType{
 	"mips64": Mips64,
 	"x86":    X86,
 	"x86_64": X86_64,
+	"ppc":    Ppc,
 }
 
 /*
@@ -79,6 +81,9 @@ module {
         x86_64: {
             // Host or device variants with x86_64 architecture
         },
+	ppc: {
+            // Host or device variants with ppc architecture
+	},
     },
     multilib: {
         lib32: {
@@ -217,6 +222,11 @@ type archProperties struct {
 			Avx    interface{} `blueprint:"filter(android:\"arch_variant\")"`
 			Popcnt interface{} `blueprint:"filter(android:\"arch_variant\")"`
 		}
+
+		// Properties for module variants being built to run on ppc (host or device)
+		Ppc struct {
+			Embed `blueprint:"filter(android:\"arch_variant\")"`
+		}
 	}
 
 	// Properties to vary by 32-bit or 64-bit
@@ -254,6 +264,10 @@ type archProperties struct {
 		Linux_x86 interface{} `blueprint:"filter(android:\"arch_variant\")"`
 		// Properties for module variants being built to run on linux x86_64 hosts
 		Linux_x86_64 interface{} `blueprint:"filter(android:\"arch_variant\")"`
+		// Properties for module variants being built to run on linux arm64 hosts
+		Linux_arm64 interface{} `blueprint:"filter(android:\"arch_variant\")"`
+		// Properties for module variants being built to run on linux ppc hosts
+		Linux_ppc interface{} `blueprint:"filter(android:\"arch_variant\")"`
 		// Properties for module variants being built to run on darwin hosts
 		Darwin interface{} `blueprint:"filter(android:\"arch_variant\")"`
 		// Properties for module variants being built to run on darwin x86 hosts
@@ -950,6 +964,7 @@ func decodeMegaDevice() ([]Arch, error) {
 		{"x86_64", "ivybridge", "", []string{"x86_64"}},
 		{"x86_64", "sandybridge", "", []string{"x86_64"}},
 		{"x86_64", "silvermont", "", []string{"x86_64"}},
+		{"ppc", "", "", []string{"ppc"}},
 	}
 
 	var ret []Arch
diff --git a/soong.bash b/soong.bash
index f695e62..9c8f95c 100755
--- a/soong.bash
+++ b/soong.bash
@@ -40,4 +40,4 @@ if [ -f "${ENVFILE}" ]; then
     fi
 fi
 
-"prebuilts/ninja/${PREBUILTOS}/ninja" -f "${BUILDDIR}/build.ninja" -w dupbuild=err "$@"
+"ninja" -f "${BUILDDIR}/build.ninja" -w dupbuild=err "$@"
